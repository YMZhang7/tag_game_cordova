var socket=io.connect('http://192.168.0.13:3000');
// var socket=io.connect('http://10.0.2.2:3000'); // works with android emulator but not with ios
// var socket=io.connect('http://localhost:3000');
// var socket=io.connect('http://127.0.0.1:3000');


rxjs.fromEvent(socket, 'connect').subscribe(() => {
    console.log('one player joined');
    socket.emit('requestPlayers');
});


rxjs.fromEvent(socket, 'disconnect').subscribe(() =>{
    alert('Something went wrong... You are disconnected');
    document.getElementById('backpack').style.visibility = "hidden";
    current_screen = homepage_screen;
    loadScreen();
    socket.open();
    socket.emit('playerQuit', playerName);
});

rxjs.fromEvent(socket, 'players').subscribe((data) => {
    players = data;
    console.log(players.length);
});

rxjs.fromEvent(socket, 'createNewPlayer').subscribe((data)=> {
    // alert('new player joined!');
    for (var i = 0; i < data.length; i++){
        if (document.getElementById(data[i]['name']) == null){
            createPlayer(data[i]);
        }
    }
    players = data;
});

rxjs.fromEvent(socket, 'goDown').subscribe((name)=>{
    console.log(name + " down");
    let index = getIndex(name);
    if(players[index]['location_y'] <= 85){
        players[index]['location_y'] += 5;
    } else {
        players[index]['location_y'] = 90;
    }
    if (current_screen == game_screan_catch || current_screen == game_screan_hide){
        document.getElementById(name).style.top = players[index]['location_y'] + "%";
        updateCatchAlert();
    }
});

rxjs.fromEvent(socket, 'goDownRocket').subscribe((name)=>{
    let index = getIndex(name);
    if(players[index]['location_y'] <= 80){
        players[index]['location_y'] += 10;
    } else {
        players[index]['location_y'] = 90;
    }
    if (current_screen == game_screan_catch || current_screen == game_screan_hide){
        document.getElementById(name).style.top = players[index]['location_y'] + "%";
        updateCatchAlert();
    }
});

rxjs.fromEvent(socket, 'goUp').subscribe((name)=>{
    console.log(name + " up");
    let index = getIndex(name);
    if(players[index]['location_y'] >= 5){
        players[index]['location_y'] -= 5;
    } else {
        players[index]['location_y'] = 0;
    }
    if (current_screen == game_screan_catch || current_screen == game_screan_hide){
        document.getElementById(name).style.top = players[index]['location_y'] + "%";
        updateCatchAlert();
    }
});

rxjs.fromEvent(socket, 'goUpRocket').subscribe((name)=>{
    let index = getIndex(name);
    if(players[index]['location_y'] >= 10){
        players[index]['location_y'] -= 10;
    } else {
        players[index]['location_y'] = 0;
    }
    if (current_screen == game_screan_catch || current_screen == game_screan_hide){
        document.getElementById(name).style.top = players[index]['location_y'] + "%";
        updateCatchAlert();
    }
});

rxjs.fromEvent(socket, 'goLeft').subscribe((name)=>{
    console.log(name + " left");
    let index = getIndex(name);
    if(players[index]['location_x'] >= 5){
        players[index]['location_x'] -= 5;
    } else {
        players[index]['location_x'] = 0;
    }
    if (current_screen == game_screan_catch || current_screen == game_screan_hide){
        document.getElementById(name).style.left = players[index]['location_x'] + "%";
        updateCatchAlert();
    }
});

rxjs.fromEvent(socket, 'goLeftRocket').subscribe((name)=>{
    let index = getIndex(name);
    if(players[index]['location_x'] >= 10){
        players[index]['location_x'] -= 10;
    } else {
        players[index]['location_x'] = 0;
    }
    if (current_screen == game_screan_catch || current_screen == game_screan_hide){
        document.getElementById(name).style.left = players[index]['location_x'] + "%";
        updateCatchAlert();
    }
});

rxjs.fromEvent(socket, 'goRight').subscribe((name)=>{
    console.log(name + " right");
    let index = getIndex(name);
    if(players[index]['location_x'] <= 85){
        players[index]['location_x'] += 5;
    } else {
        players[index]['location_x'] = 90;
    }
    if (current_screen == game_screan_catch || current_screen == game_screan_hide){
        document.getElementById(name).style.left = players[index]['location_x'] + "%";
        updateCatchAlert(); 
    }
});

rxjs.fromEvent(socket, 'goRightRocket').subscribe((name)=>{
    let index = getIndex(name);
    if(players[index]['location_x'] <= 80){
        players[index]['location_x'] += 10;
    } else {
        players[index]['location_x'] = 90;
    }
    if (current_screen == game_screan_catch || current_screen == game_screan_hide){
        document.getElementById(name).style.left = players[index]['location_x'] + "%";
        updateCatchAlert();
    }
});

rxjs.fromEvent(socket, 'playerCaught').subscribe((name)=>{
        if (playerName == name){
            alert('You are caught!');
            timerSubscription.unsubscribe();
            document.getElementById('time').style.width = "100%";
            if (players[getIndex(playerName)]["level"] == 1){
                seconds = 60;
            } else {
                seconds = 120;
            }
            // timer.next(seconds);
            timer = second.pipe(rxjs.operators.take(seconds));

            timerSubscription = timer.subscribe(
                (sec) => {
                    var newWidth = 100 * (seconds - sec - 1) / seconds;
                    document.getElementById('time').style.width = newWidth + "%";
                    if (sec == seconds-1){
                        alert('level up!');
                        if (players[getIndex(playerName)]['level'] == 1){
                            upgradeToLevel2(getIndex(playerName));
                        } else {
                            // upgrade to level 3
                        }
                        socket.emit('updatePlayer', players[getIndex(playerName)]);
                    }
                },
            );
        } else if(catchButtonClicked){
            catchButtonClicked = false;
            playersCaught++;
            // level up
            if (players[getIndex(playerName)]['level'] == 1){
                alert('Level up!');
                upgradeToLevel2(getIndex(playerName));
                // document.getElementById('level').innerHTML = "Level 2";
                // document.getElementById('backpack').innerHTML = "Ice cube: " + players[getIndex(playerName)]['iceCube'];
                // updatePlayerCircle(players[getIndex(playerName)]["name"], 2);
                socket.emit('updatePlayer', players[getIndex(playerName)]);
            } else if(players[getIndex(playerName)]['level'] == 2){
                if (playersCaught == 2){
                    // level up
                    alert('Level up!');
                    upgradeToLevel3(getIndex(playerName));
                    socket.emit('updatePlayer', players[getIndex(playerName)]);
                }
            } else {
                if (playersCaught == 3){
                    alert("You've gained two more rockets!");
                    players[getIndex(playerName)]['rocket'] += 2;
                    document.getElementById('tools').innerHTML = "Rocket: " + players[getIndex(playerName)]['rocket'];
                    socket.emit('updatePlayer', players[getIndex(playerName)]);
                }
            }
        }
});

rxjs.fromEvent(socket, 'updatePlayer').subscribe(
    (data) => {
        let index = getIndex(data['name']);
        players[index] = data;
        updatePlayerCircle(data['name'], data["level"]);
    }
);

rxjs.fromEvent(socket, 'playerQuit').subscribe((name) => {
        if (name == playerName){
            console.log('you are quitting');
            if (!players[getIndex(playerName)]['toChase']){
                timerSubscription.unsubscribe();
                // delete time bar
                document.getElementById('time').remove();
            }
            // var name = players[data]['name'];
            // document.getElementById(name).style.display = "none";
            document.getElementById(name).remove();
            players = [];
        } else {
            console.log('one player quit');
            players.splice(getIndex(name), 1);
            document.getElementById(name).remove();
        }
});

rxjs.fromEvent(socket, 'paralysePlayer').subscribe((data) => {

        if (players[getIndex(playerName)]['name'] == data['name']){
            alert('You are frozen!');
            document.getElementById('controller').style.display = "none";
            document.getElementById('paralysed').style.display = "flex";
            frozenSubscription = rxjs.interval(1000).pipe(rxjs.operators.take(10)).subscribe(
                (sec) => {
                    var newWidth = 100 * (10 - sec - 1) / 10;
                    document.getElementById('paralysedTime').style.width = newWidth + "%";
                    if (sec == 9){
                        // upgradeToLevel2(getIndex(playerName));
                        // socket.emit('updatePlayer', players[getIndex(playerName)]);
                        socket.emit('unfrozen', data);
                    }
                }
            );
        }
        players[getIndex(data['name'])] = data;
        document.getElementById(data['name']).style.borderRadius = "0%";

});

rxjs.fromEvent(socket, 'unfrozen').subscribe((data) => {

        if (data['name'] == players[getIndex(playerName)]['name']){
            document.getElementById('paralysed').style.display = "none";
            document.getElementById('controller').style.display = "grid";
        }
        players[getIndex(data['name'])] = data;
        document.getElementById(data['name']).style.borderRadius = "50%";

});

rxjs.fromEvent(socket, 'useShields').subscribe((data) => {
    // if (data['name'] == this_player['name']){
    //     document.getElementById('paralysed').style.display = "none";
    //     document.getElementById('controller').style.display = "grid";
    //     document.getElementById('tools').innerHTML = "Shields: " + data['shields'];
    // } 
        players[getIndex(data['name'])] = data;
        document.getElementById(data['name']).style.borderRadius = "50%";
});

rxjs.fromEvent(socket, 'invisible').subscribe((data) => {
        document.getElementById(data).style.display = "none";
});

rxjs.fromEvent(socket, 'invisibilityStop').subscribe((name) => {
        if (playerName == name){
            document.getElementById(name).style.backgroundColor = "rgb(255, 255, 0)";
        } else {
            document.getElementById(name).style.display = "flex";
        }
});