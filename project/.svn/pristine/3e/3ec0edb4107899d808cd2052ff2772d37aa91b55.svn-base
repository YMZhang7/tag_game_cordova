// object for storing the info about active player
// let this_player = {
    // index
    // name
    // toChase
    // level
    // location_x
    // location_y
    // ========= level 2
    // iceCube
    // shields
    // ========= level 3
    // rockets
    // invisibilityCloak
// }; 
let players = []; // retrieve from server
let playerName = "";
let playersCaught = 0;
var catchButtonClicked = false;
// var pace_length = 5;



document.addEventListener('deviceready', onDeviceReady, false);
const start_button = document.getElementById('startButton')
const goUp_button = document.getElementById('up-key');
const goDown_button = document.getElementById('down-key');
const goLeft_button = document.getElementById('left-key');
const goRight_button = document.getElementById('right-key');
const catch_button = document.getElementById('catch-button')

// function getIndex(playerName){
//     for (var i = 0; i < players.length; i++){
//         console.log('here');
//         if (players[i]['name'] == playerName){
//             return i;
//         }
//     }
// }

function getIndex(name){
    for (var i = 0; i < players.length; i++){
        if (players[i]['name'] == name){
            return i;
        }
    }
}



// rxjs.fromEvent(startButton, 'click').subscribe(()=>{
//     socket.emit('requestPlayers');
// });

rxjs.fromEvent(goDown_button, 'click').subscribe(() => {
    socket.emit('goDown', playerName);
    console.log(players);
});

rxjs.fromEvent(goUp_button, 'click').subscribe(()=>{
    socket.emit('goUp', playerName);
});

rxjs.fromEvent(goLeft_button, 'click').subscribe(()=>{
    socket.emit('goLeft', playerName);
});

rxjs.fromEvent(goRight_button, 'click').subscribe(()=>{
    socket.emit('goRight', playerName);
});

rxjs.fromEvent(catch_button, 'click').subscribe(() => {
    for (var i = 0; i < players.length; i++){
        if (!players[i]['toCatch'] && getIndex(playerName) != i && canCatch(players[i], players[getIndex(playerName)])){
            catchButtonClicked = true;
            socket.emit('caught', players[i]['name']);
        }
    }
});


function onDeviceReady() {
    console.log('Running cordova-' + cordova.platformId + '@' + cordova.version);
    document.getElementById('deviceready').classList.add('ready');
}



// function onConfirm(buttonIndex){
//     console.log(buttonIndex);
//     if (buttonIndex == 1){
//         let playground = document.getElementsByClassName('playground')[0];
//         while(playground.firstChild){
//             playground.removeChild(playground.firstChild);
//         }
//         document.getElementById('gameroom-page').style.visibility = "hidden";
//         document.getElementById('homepage').style.visibility = "visible";
//         current_page = 'homepage';
//         previous_page = 'homepage';
//     }
// }

// Extract info and start the game
function getRegistrationInfo(){
    let this_player = {};
    console.log(players.length);
    let name = document.getElementById('nickname').value;
    if (nameUsed(name)){
        alert("This name is invalid. Please choose another one.");
    } else if (name == "") {
        alert("Name cannot be empty!");
    } else {
        this_player['name'] = name;
        playerName = name;
        
        this_player['level'] = 1;
        let toChase;
        if (document.getElementById('chase').checked){
            toChase = true;
            this_player['location_x'] = 0;
            this_player['location_y'] = 0;
        } else {
            toChase = false;
            this_player['location_x'] = 90;
            this_player['location_y'] = 90;
        }
        this_player['toChase'] = toChase;
        
        socket.emit('newPlayer', this_player);
        return this_player;
    }
}

// To create HTML elements for a player
function createPlayer(player){
    // create circle and set content
    const player_circle = document.createElement('div');
    // player_circle.id = "currentPlayer";
    player_circle.id = player['name'];
    const name = document.createTextNode(player['name']);
    player_circle.appendChild(name);
    player_circle.className = "player";
    // set background colour
    if (player['level'] == 1){
        player_circle.style.backgroundColor = "rgb(128, 255, 128)";
    } else if (player['level'] == 2){
        player_circle.style.backgroundColor = "rgb(51, 51, 255)";
        // change font colour
        player_circle.style.color = "white";
    } else {
        player_circle.style.backgroundColor = "rgb(255, 255, 0)";
    }
    // set border
    if (player['toChase']){
        player_circle.style.border = "4px solid orange";
    } 
    player_circle.style.top = player['location_y'] + "%";
    player_circle.style.left = player['location_x'] + "%";
    // add circle to playground
    document.getElementsByClassName('playground')[0].appendChild(player_circle);
}

function upgradeToLevel2(index){
    document.getElementById('backpack').style.visibility = "visible";
    if (players[index]['toChase']){
        players[index]['iceCube'] = 2;
        document.getElementById('tools').innerHTML = "Ice cube: " + players[getIndex(playerName)]['iceCube'];
        playersCaught = 0;
    } else {
        players[index]['shields'] = 2;
        document.getElementById('tools').innerHTML = "Shields: " + players[getIndex(playerName)]['shields'];
        timerHideLevelUp();
        // seconds = 120;
        // timer.next(seconds);
        // timer = second.pipe(rxjs.operators.take(seconds));
        // timerSubscription = timer.subscribe(
        //     (sec) => {
        //         var newWidth = 100 * (seconds - sec - 1) / seconds;
        //         document.getElementById('time').style.width = newWidth + "%";
        //         if (sec == (seconds - 1)){
        //             alert('level up!');
        //             upgradeToLevel3(getIndex(playerName));
        //             socket.emit('updatePlayer', players[getIndex(playerName)]);
        //         }
        //     },
        // );
    }
    // var useButton = document.createElement("button");
    // useButton.innerHTML = "use";
    // useButton.addEventListener('click', useTool);
    // document.getElementById('backpack').appendChild(useButton);
    players[index]['level'] = 2;
    document.getElementById('level').innerHTML = "Level 2";
    updatePlayerCircle(players[index]["name"], 2);
}

function upgradeToLevel3(index){
    if (players[index]['toChase']){
        delete players[index].iceCube;
        players[index]['rocket'] = 2;
        document.getElementById('tools').innerHTML = "Rocket: " + players[index]['rocket'];
        playersCaught = 0;
    } else {
        delete players[index].shields;
        players[index]['invisibilityCloak'] = 2;
        document.getElementById('tools').innerHTML = "Invisibility cloak: " + players[index]['invisibilityCloak'];
        // level3Timer();
        timerHideLevelUp();
    }
    players[index]['level'] = 3;
    document.getElementById('level').innerHTML = "Level 3";
    updatePlayerCircle(players[index]["name"], 3);
}

// function level3Timer(){
//     seconds = 180;
//     timer = second.pipe(rxjs.operators.take(seconds));
//     timerSubscription = timer.subscribe(
//         (sec) => {
//             var newWidth = 100 * (seconds - sec - 1) / seconds;
//             document.getElementById('time').style.width = newWidth + "%";
//             if (sec == (seconds - 1)){
//                 alert("You've gained 2 more invisibility cloaks!");
//                 players[getIndex(playerName)]['invisibilityCloak'] += 2;
//                 document.getElementById('tools').innerHTML = "Invisibility cloak: " + players[getIndex(playerName)]['invisibilityCloak'];
//                 socket.emit('updatePlayer', players[getIndex(playerName)]);
//                 level3Timer();
//             }
//         },
//     );
// }

// function downgradeToLevel2(player){
//     if (player['toChase']){
//         delete player.rocket;
//         player['iceCube'] = 2;
//     } else {
//         delete player.invisibilityCloak;
//         player['shields'] = 2;
//     }
//     player['level'] = 2;
// }

// function downgradeToLevel1(player){
//     if (player['toChase']){
//         delete player.iceCube;
//     } else {
//         delete player.shields;
//     }
//     player['level'] = 1;
// }

function canCatch(player1, player2){
    let x1 = player1['location_x'];
    let x2 = player2['location_x'];
    let y1 = player1['location_y'];
    let y2 = player2['location_y'];
    let distance_x = Math.abs(x1 - x2);
    let distance_y = Math.abs(y1 - y2);
    if (distance_x <= 5 && distance_y <= 5){
        return true;
    } else {
        return false;
    }
}

function nameUsed(name){
    for (var i = 0; i < players.length; i++){
        if (players[i]['name'] == name){
            return true;
        }
    }
    return false;
}

function updatePlayerCircle(name, level){
    var player = document.getElementById(name);
    if (level == 2){
        player.style.backgroundColor = "rgb(51, 51, 255)";
        player.style.color = "white";
    } else if(level == 3){
        player.style.backgroundColor = "rgb(255, 255, 0)";
        player.style.color = "black";
    }
}

function randomlySelectHidingPlayer(){
    var list = [];
    for (let i = 0; i < players.length; i++){
        if (!players[i]['toChase']){
            list.push(players[i]);
        }
    }
    let ind = Math.floor(Math.random() * list.length); 
    return list[ind];
}

function useTool(){
    if (players[getIndex(playerName)]['toChase']){
        if (players[getIndex(playerName)]['level'] == 2){
            if (players[getIndex(playerName)]['iceCube'] > 0){
                players[getIndex(playerName)]['iceCube'] -= 1;
                document.getElementById('tools').innerHTML = "Ice cube: " + players[getIndex(playerName)]['iceCube'];
                socket.emit('useIceCube', playerName); // tell server to delete one icecube
                let randomHidngPlayer = randomlySelectHidingPlayer();
                socket.emit('paralysePlayer', randomHidngPlayer);
            }
        } else if (players[getIndex(playerName)]['level'] == 3){
            if (players[getIndex(playerName)]['rocket'] > 0){
                players[getIndex(playerName)]['rocket'] -= 1;
                document.getElementById('tools').innerHTML = "Rocket: " + players[getIndex(playerName)]['rocket'];
                socket.emit('useRocket', playerName);
                timerRocketStart();
                // if (document.getElementById('rocketTime') == null){
                //     const rocketTime = document.createElement("div");
                //     rocketTime.id = "rocketTime";
                //     rocketTime.classList.add('time');
                //     document.getElementById('bar').appendChild(rocketTime);
                // } else {
                //     document.getElementById('rocketTime').style.width = "100%";
                // }
                // var rocketSeconds = 10;
                // rxjs.interval(1000).pipe(rxjs.operators.take(rocketSeconds)).subscribe(
                //     (sec) => {
                //         var newWidth = 100 * (10 - sec - 1) / 10;
                //         document.getElementById('rocketTime').style.width = newWidth + "%";
                //         if (sec == 9){
                //             alert('rocket times up');
                //             socket.emit('rocketStop', playerName);
                //         }
                //     },
                // );
            }
        }
    } else {
        if (players[getIndex(playerName)]['level'] == 2){
            if (players[getIndex(playerName)]['shields'] > 0){
                players[getIndex(playerName)]['shields'] -= 1;
                document.getElementById('tools').innerHTML = "Shields: " + players[getIndex(playerName)]['shields'];
                document.getElementById('paralysed').style.display = "none";
                document.getElementById('controller').style.display = "grid";
                document.getElementById(players[getIndex(playerName)]['name']).style.borderRadius = "50%";
                // document.getElementById('tools').innerHTML = "Shields: " + data['shields'];
                socket.emit('useShields', playerName); // tell server to delete one shield
            }
        } else if (players[getIndex(playerName)]['level'] == 3){
            players[getIndex(playerName)]['invisibilityCloak'] -= 1;
            document.getElementById('tools').innerHTML = "Invisibility cloak: " + players[getIndex(playerName)]['invisibilityCloak'];
            socket.emit('useCloak', playerName);
            document.getElementById(players[getIndex(playerName)]['name']).style.backgroundColor = "white";
            timerInvisibleStart();
            // var invisibleSeconds = 10;
            // rxjs.interval(1000).pipe(rxjs.operators.take(invisibleSeconds)).subscribe(
            //     (sec) => {
            //         // var newWidth = 100 * (10 - sec - 1) / 10;
            //         // document.getElementById('rocketTime').style.width = newWidth + "%";
            //         if (sec == 9){
            //             alert('times up');
            //             // socket.emit('updatePlayer', players[getIndex(playerName)]);
            //             // socket!!!! rocket stopped
            //             socket.emit('invisibilityStop', playerName);
            //         }
            //     },
            // );
        }
    }
}

function updateCatchAlert(){
    // console.log(getIndex(playerName));
    if (players[getIndex(playerName)]['toChase']){
        var catching = false;
        for (let i = 0; i < players.length; i++){
            // if (players[i]['index'] != getIndex(playerName)){
                if (!players[i]['toChase']){
                    if (canCatch(players[i], players[getIndex(playerName)])){
                        catching = true;
                        break;
                    }
                }
            // }
        }
        if (catching){
            catch_button.style.backgroundColor = "rgb(113, 218, 113)";
        } else {
            catch_button.style.backgroundColor = "gray";
        }
    } else {
        var danger = false;
        for (let i = 0; i < players.length; i++){
            if (players[i]['toChase']){
                if (canCatch(players[i], players[getIndex(playerName)])){
                    danger = true;
                    break;
                }
            }
        }
        if (danger){
            document.getElementById('status-check').style.backgroundColor = "red";
            document.getElementById('status-check').innerHTML = "danger";
        } else {
            document.getElementById('status-check').style.backgroundColor = "rgb(113, 218, 113)";
            document.getElementById('status-check').innerHTML = "safe";
        }
    }
}