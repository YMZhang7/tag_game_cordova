var http = require('http').createServer();
var io=require('socket.io')(http);

http.listen(3000, () => {
    console.log("server started");
});

var players = [];

io.sockets.on('connection',function(socket){
    console.log('one player connected'); // server side
    socket.on('requestPlayers', () => {
        socket.emit('players', players);
    });
    // socket.emit('text', 'wow. such event. very real time.');
    socket.on('newPlayer', (data) => {
        // socket.broadcast.emit('createNewPlayer', data); // for current players to load new player
        players.push(data);
        // console.log(players);
        io.emit('createNewPlayer', players);
    });
    socket.on('goDown', (data)=>{
        if (players[data]['location_y'] <= 85){
            players[data]['location_y'] += 5;
        } else {
            players[data]['location_y'] = 90;
        }
        socket.broadcast.emit('goDown', data);
    });
    socket.on('goUp', (data)=>{
        if (players[data]['location_y'] >= 5){
            players[data]['location_y'] -= 5;
        } else {
            players[data]['location_y'] = 0;
        }
        socket.broadcast.emit('goUp', data);
    });
    socket.on('goLeft', (data)=>{
        if (players[data]['location_x'] >= 5){
            players[data]['location_x'] -= 5;
        } else {
            players[data]['location_x'] = 0;
        }
        socket.broadcast.emit('goLeft', data);
    });
    socket.on('goRight', (data)=>{
        if (players[data]['location_x'] <= 85){
            players[data]['location_x'] += 5;
        } else {
            players[data]['location_x'] = 90;
        }
        socket.broadcast.emit('goRight', data);
    });

    socket.on('caught', (index)=>{
        // alert the player
        // inform other players to update players list
        io.emit('playerCaught', index);
        console.log('caught');
    });

    socket.on('playerQuit', (data) => {
        players.splice(data, 1);
        socket.broadcast.emit('playerQuit', data);
    });

    socket.on('updatePlayer', (player) => {
        players[player['index']] = player;
        socket.broadcast.emit('updatePlayer', player);
    });
});

io.sockets.on('disconnection', function(){
    console.log('player logged out')
});