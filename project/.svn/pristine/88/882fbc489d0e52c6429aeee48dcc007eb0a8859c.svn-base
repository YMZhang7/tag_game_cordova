// object for storing the info about active player
let this_player = {
    // index
    // name
    // toChase
    // level
    // location_x
    // location_y
    // ========= level 2
    // iceCube
    // shields
    // ========= level 3
    // rockets
    // invisibilityCloak
}; 
let players = []; // retrieve from server


const pace_length = 15;
let current_page = 'homepage';
let previous_page = 'homepage';


document.addEventListener('deviceready', onDeviceReady, false);
document.addEventListener('backbutton', onBackKeyDown, false);

const goUp_button = document.getElementById('up-key');
const goDown_button = document.getElementById('down-key');
const goLeft_button = document.getElementById('left-key');
const goRight_button = document.getElementById('right-key');

const goDown = rxjs.of(this_player).pipe(
    rxjs.operators.tap(player => {
        if (player['location_y'] <= 85){
            player['location_y'] += 5;
            players[this_player['index']]['location_y'] += 5;
        } else {
            player['location_y'] = 90;
            players[this_player['index']]['location_y'] = 90;
        }
        document.getElementById(this_player['name']).style.top = player['location_y'] + "%";
        socket.emit('goDown', this_player['index']);
        for (let i = 0; i < players.length; i++){
            console.log(players[i]['name'] + ": " + players[i]['location_x'] + " " + players[i]['location_y']);
        }
    })
);

const goUp = rxjs.of(this_player).pipe(
    rxjs.operators.tap(player => {
        if (player['location_y'] >= 5){
            player['location_y'] -= 5;
            players[this_player['index']]['location_y'] -= 5;
        } else {
            player['location_y'] = 0;
            players[this_player['index']]['location_y'] = 0;
        }
        document.getElementById(this_player['name']).style.top = player['location_y'] + "%";
        socket.emit('goUp', this_player['index']);
        for (let i = 0; i < players.length; i++){
            console.log(players[i]['name'] + ": " + players[i]['location_x'] + " " + players[i]['location_y']);
        }
    })
);

const goLeft = rxjs.of(this_player).pipe(
    rxjs.operators.tap(player => {
        if (player['location_x'] >= 5){
            player['location_x'] -= 5;
            players[this_player['index']]['location_x'] -= 5;
        } else {
            player['location_x'] = 0;
            players[this_player['index']]['location_x'] = 0;
        }
        document.getElementById(this_player['name']).style.left = player['location_x'] + "%";
        socket.emit('goLeft', this_player['index']);
        for (let i = 0; i < players.length; i++){
            console.log(players[i]['name'] + ": " + players[i]['location_x'] + " " + players[i]['location_y']);
        }
    })
);

const goRight = rxjs.of(this_player).pipe(
    rxjs.operators.tap(player => {
        if (player['location_x'] <= 85){
            player['location_x'] += 5;
            players[this_player['index']]['location_x'] += 5;
        } else {
            player['location_x'] = 90;
            players[this_player['index']]['location_x'] = 90;
        }
        document.getElementById(this_player['name']).style.left = player['location_x'] + "%";
        socket.emit('goRight', this_player['index']);
        for (let i = 0; i < players.length; i++){
            console.log(players[i]['name'] + ": " + players[i]['location_x'] + " " + players[i]['location_y']);
        }
    })
);

rxjs.fromEvent(goDown_button, 'click').pipe(
    rxjs.operators.switchMap(()=>goDown),
).subscribe();
rxjs.fromEvent(goUp_button, 'click').pipe(
    rxjs.operators.switchMap(()=>goUp),
).subscribe();
rxjs.fromEvent(goLeft_button, 'click').pipe(
    rxjs.operators.switchMap(()=>goLeft),
).subscribe();
rxjs.fromEvent(goRight_button, 'click').pipe(
    rxjs.operators.switchMap(()=>goRight),
).subscribe();

rxjs.of(players).pipe(
    rxjs.operators.tap((data) => {
        for (let i = 0; i < data.length; i++){
            createPlayer()
        }
    })
).subscribe();

function onDeviceReady() {
    console.log('Running cordova-' + cordova.platformId + '@' + cordova.version);
    document.getElementById('deviceready').classList.add('ready');
}

function onBackKeyDown() {
    if (current_page != 'gameroom-page'){
        document.getElementById(current_page).style.visibility = "hidden";
        document.getElementById(previous_page).style.visibility = "visible";
    } else {
        navigator.notification.confirm('Are you sure you want to exit the game?', onConfirm, 'Notice', ['Exit', 'Cancel']);
    }
}

function onConfirm(buttonIndex){
    console.log(buttonIndex);
    if (buttonIndex == 1){
        let playground = document.getElementsByClassName('playground')[0];
        while(playground.firstChild){
            playground.removeChild(playground.firstChild);
        }
        document.getElementById('gameroom-page').style.visibility = "hidden";
        document.getElementById('homepage').style.visibility = "visible";
        current_page = 'homepage';
        previous_page = 'homepage';
    }
}

// Go to registration page
function callRegistrationPage(){
    document.getElementById('homepage').style.visibility = "hidden";
    document.getElementById('registration-page').style.visibility = "visible";
    current_page = 'registration-page';
}

function exitGame(){
    let playground = document.getElementsByClassName('playground')[0];
    while(playground.firstChild){
        playground.removeChild(playground.firstChild);
    }
    document.getElementById('gameroom-page').style.visibility = "hidden";
    document.getElementById('homepage').style.visibility = "visible";
    current_page = 'homepage';
    previous_page = 'homepage';
}

// Extract info and start the game
function getRegistrationInfo(){
    let name = document.getElementById('nickname').value;
    let toChase;
    if (document.getElementById('chase').checked){
        toChase = true;
    } else {
        toChase = false;
    }
    // store info about player
    this_player['index'] = players.length;
    // console.log(this_player['index']);
    this_player['name'] = name;
    this_player['toChase'] = toChase;
    this_player['level'] = 1;
    this_player['location_x'] = 0;
    this_player['location_y'] = 0;
    // players['currentPlayer'] = this_player;
    // set display in new page
    document.getElementById('level').innerHTML = 'Level 1';
    // switch between pages
    document.getElementById('registration-page').style.visibility = "hidden";
    // document.getElementById('homepage').style.visibility = "hidden";
    document.getElementById('gameroom-page').style.visibility = "visible";
    current_page = 'gameroom-page';
    previous_page = 'registration-page';
    // players.push(this_player);
    // this_player_index = players.length;
    // emit event to server
    socket.emit('newPlayer', this_player);
    // createPlayer(this_player);
}

// To create HTML elements for a player
function createPlayer(player){
    // create circle and set content
    const player_circle = document.createElement('div');
    // player_circle.id = "currentPlayer";
    player_circle.id = player['name'];
    const name = document.createTextNode(player['name']);
    player_circle.appendChild(name);
    player_circle.className = "player";
    // set background colour
    if (player['level'] == 1){
        player_circle.style.backgroundColor = "rgb(128, 255, 128)";
    } else if (player['level'] == 2){
        player_circle.style.backgroundColor = "rgb(51, 51, 255)";
        // change font colour
        player_circle.style.color = "white";
    } else {
        player_circle.style.backgroundColor = "rgb(255, 255, 0)";
    }
    // set border
    if (player['toChase']){
        player_circle.style.border = "4px solid orange";
    }
    // add circle to playground
    document.getElementsByClassName('playground')[0].appendChild(player_circle);
}

function renderGame(){
    document.getElementById('level').innerHTML = "Level " + this_player['level'];
    for (let i = 0; i < players.length; i++){
        createPlayer(players[i]);
    }
}

function upgradeToLevel2(player){
    if (player['toChase']){
        player['iceCube'] = 2;
    } else {
        player['shields'] = 2;
    }
    player['level'] = 2;
}

function upgradeToLevel3(player){
    if (player['toChase']){
        delete player.iceCube;
        player['rocket'] = 2;
    } else {
        delete player.shields;
        player['invisibilityCloak'] = 2;
    }
    player['level'] = 3;
}

function downgradeToLevel2(player){
    if (player['toChase']){
        delete player.rocket;
        player['iceCube'] = 2;
    } else {
        delete player.invisibilityCloak;
        player['shields'] = 2;
    }
    player['level'] = 2;
}

function downgradeToLevel1(player){
    if (player['toChase']){
        delete player.iceCube;
    } else {
        delete player.shields;
    }
    player['level'] = 1;
}

function toCatch(){
    console.log("Caught!");
    // let distance = ?
    // if (distance < 5px){}
}